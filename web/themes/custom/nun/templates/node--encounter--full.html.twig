{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
     Only "getter" methods (method names starting with "get", "has", or "is")
     and a few common methods such as "id" and "label" are available. Calling
     other methods (such as node.delete) will result in an exception.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @ingroup templates
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}

{%
  set classes = [
    node.bundle|clean_class,
    node.isPromoted() ? 'is-promoted',
    node.isSticky() ? 'is-sticky',
    not node.isPublished() ? 'is-unpublished',
    view_mode ? view_mode|clean_class,
    'clearfix',
  ]
%}
{{ attach_library('nun/owl-carousel') }}
<article{{ attributes.addClass(classes) }}>
  {{ title_prefix }}
  {% if not page %}
    <h2{{ title_attributes }}>
      <a href="{{ url }}" rel="bookmark">{{ label }}</a>
    </h2>
  {% endif %}
  {{ title_suffix }}

  {% if display_submitted %}
    <footer>
      {{ author_picture }}
      <div{{ author_attributes.addClass('author') }}>
        {% trans %}<strong>By {{ author_name }}</strong> |  <em>{{ date }}</em>{% endtrans %}
        {{ metadata }}
      </div>
    </footer>
  {% endif %}
  <div id="credit-profile">
    <img src="{{ profile_information['image_url']}}" title="{{ profile_information['image_title']}}" alt="{{ profile_information['image_alt']}}" />
    <div class="credit-name">Posted by <strong> {{ profile_information['full_name']}}</strong>, <br />
      North Country explorer from {{ profile_information['hometown']}}
    </div>
  </div>

  <div id="encounter-content">
    <div id="big-map" style="display:none;"></div>
    <div id="mini-map"></div>

    <div id="encounter-body"><strong>{{ node.field_encounter_date.value|date('U')|format_date('day_only') }}</strong> &mdash; {{ content.field_encounter_description }} </div>

    {#if we have at least two images, see preprocess_node to see where blog_image_data is created #}
    {% if encounter_image_data[1] is defined %}
        <div class="owl-main-outer-wrapper">
          <div id="owl-demo" class="owl-carousel">
            {% for item in encounter_image_data %}
              <div class="item">
                    <img src="{{item['uri']}}" alt="{{ item['alt'] }}" />
              </div>
            {% endfor %}
          </div>
          <div class="nav-left"></div>
          <div class="nav-right"></div>
        </div>

        {# captions test #}
        <div class="owl-main-captions-wrapper">
          <div id="owl-demo-captions" class="owl-carousel">
            {% for item in encounter_image_data %}
              <div class="item">
                <p class="caption">{{ item['title'] }}</p>
              </div>
            {% endfor %}
          </div> {# id="owl-demo-captions" #}
        </div>   {# class="owl-main-captions-wrapper #}

        {# start the smaller thumbnail carousel #}
        <div class="owl-thumb-outer-wrapper">
          <div id="owl-demo-thumb" class="owl-carousel">
            {% for item in encounter_image_data %}
              <div class="item">
                <img src="{{ item['thumb_uri']}}" alt="{{ item['alt'] }}">
              </div>
            {% endfor %}
          </div> {# //id="owl-demo-thumb" #}
        </div> {# class="owl-thumb-outer-wrapper" #}
    {% elseif encounter_image_data['uri'] is defined %}
      {# we didn't have 2 images, do we have just one? #}
      <div class="item">
        {# for a single image i'm using a differnet preset to take up the available width #}
        <img src="{{encounter_image_data['uri']}}" />
        <p class="caption">{{ encounter_image_data['title'] }}</p>
      </div>
    {% endif %}
  </div>
  <div{{ content_attributes.addClass('content') }}>
    {{ content.body }}
    {{ content.links }}
    {{ drupal_view('enhanced_comments') }}
  </div>

</article>
